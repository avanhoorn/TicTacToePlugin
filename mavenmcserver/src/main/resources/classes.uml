@startuml

class FieldPoint {
    .. Fields..
    +int x
    +int y
    +int z
    
    .. Methods ..
    +FieldPoint(int x, int y, int z)
    +FieldPoint offsetBy(int x, int y, int z)
}

+enum GameEndCause {
    <b>MAIN_WIN</b>, // Main player won
    <b>OPPONENT_WIN</b>, // Opponent player won
    <b>TIE</b>, // Nobody won
    <b>CANCEL</b> // Player cancelled
}

+class Game {
    .. Constants ..
    +{static}Material BASE_PLATE_MATERIAL
    +{static}Material NEUTRAL_MATERIAL
    +{static}Material MAIN_PLAYER_MATERIAL
    +{static}Material OPPONENT_PLAYER_MATERIAL
    +{static}Sound MARK_FIELD_SOUND
    +{static}float MARK_FIELD_SOUND_PITCH
    +{static}Sound WIN_BEEP_SOUND
    +{static}Sound WIN_SOUND
    +{static}Sound LOSE_SOUND
    +{static}Sound TIE_SOUND
    +{static}float TIE_SOUND_PITCH
    +{static}Sound FIELD_FALL_SOUND
    +{static}float FIELD_FALL_SOUND_PITCH
    +{static}HashMap<UUID, Game> queuedGames
    +{static}List<Game> getRequestsTo(Player opponentPlayer)
    +{static}Game getQueuedGameWithPlayers(String mainPlayerName, Player opponentPlayer) /' For use in CommandTicTacToeAccept.java '/
    +{static}Game getQueuedGameByUUID(String uuidString) /' For use in CommandTicTacToeAccept.java '/
    +{static}HashMap<Player, Game> runningGames
    +{static}HashMap<Player, GameConfig> lostGames
    
    .. Fields ..
    +UUID uuid
	+GameConfig config
    +GameListener listener
    +GameState state /' Stores the marked fields in a separate positioning system '/
    boolean didCompletePlace
    +boolean opponentPlayersTurn /' Whose turn it is! '/
    +Location location /' Start block location; stores world '/
    +CubicBlockArea gameArea /' Set in contructor '/
    +Plugin plugin /' Used for listener and for placing blocks '/
    
    +BukkitRunnable gravityRunnable
    
    -HashMap<Location, BlockData> beforeGameBlocks
    
    .. Methods ..
    +Game(GameConfig config, Plugin plugin, boolean isReturnMatch)
    -void registerQueued()
    -Location generateGameLocation() /' Based on the main player's facing '/
    -CubicBlockArea generateGameArea() /' Based on the game's size and the main player's location '/
    -void inviteOpponent(boolean isReturnMatch) /' Calls start() when accepted '/
    +void start() /' Starts the game and places the blocks; activates the listener '/
    -void registerStarted() /' Configures the static HashMaps! '/
    +void end(GameEndCause cause) /' Ends the game and removes the blocks; deactivates the listener '/
    -void registerEnded() /' Configured the static HashMaps! '/
    -void restoreOldBlocksFromBeforeGame() /' Restores the blocks to how they were before this game started (as stored in Game::beforeGameBlocks) '/
    +void placeAt(FieldPoint position) /' Called when the current player marks a field; checks for win and changes the turn '/
    +void checkForWin() /' Called when falling is done '/
    +void playEndAnimation()
    +Player getPlayerInTurn()
    +void playGameSound(Sound sound, float pitch) /' Plays a sound to both config players! '/
    
    /' BUILDING THE GAME '/
    -void storeCurrentBlocksInGameArea()
    -void placeGameIntoWorld()
    -void fillGameAreaWithAir()
    -void placeBasePlateIntoWorld()
    -void placeFieldBlocksIntoWorld()
    -void placeLightBlocksIntoWorld()
}


+class GameConfig {
    .. Constants ..
    +{static}int MIN_X_Z_SIZE
    +{static}int MIN_HEIGHT
    {static}String ERROR_MAIN_PLAYER_NULL
    {static}String ERROR_OPPONENT_PLAYER_NULL
    {static}String ERROR_PLAYER_ALREADY_IN_GAME
    {static}String ERROR_WIN_REQUIRED_AMOUNT_TOO_LARGE
    
    .. Fields ..
    +Player mainPlayer
    +Player opponentPlayer
    +Vector3i size
    +int winRequiredAmount
    
    .. Methods ..
    +GameConfig(Player mainPlayer, Player opponentPlayer, Vector3i size, int winRequiredAmount)
    +List<String> validateReturningErrors() /' Returns a list of errors in the config! Empty means OK '/
    List<String> validateNumbersReturningErrors() /' sub-part of validateReturningErrors() '/
    +int getSmallestDimenson()
    +int getLargestDimension()
}


+enum FieldState {
    <b>NEUTRAL</b>, <b>MAIN</b>, <b>OPPONENT</b>
}

class GameState {
    .. Constants ..
    +{static}int CONVERSION_Y_OFFSET
    +{static}Vector3i DIRECTIONS_TO_CHECK[]
    
    .. Fields ..
    +Vector3i gameSize
    FieldState blockStates[]
    +FieldPoint lastPlacePosition
    
    .. Methods ..
    +GameState(Vector3i gameSize) /' Sizes the array and fills it with FieldState.NEUTRAL '/
    +FieldPoint blockLocationToFieldPoint(Location gameStartBlock, Location block) /' /!\ CHECK FOR WORLD '/
    +Location fieldPointToBlockLocation(Location gameStartBlock, FieldPoint point) /' /!\ SET WORLD '/
    +boolean fieldPointIsValid(FieldPoint point) /' Returns true if the given FieldPoint is contained in this game (regarding the size!) '/
    +FieldState getStateAt(FieldPoint position)
    +FieldState getStateAt(int x, int y, int z)
    +FieldState getStateIfAny(FieldPoint position) /' NEUTRAL on exception '/
    +void setStateAt(FieldPoint position, FieldState newState)
    +void setStateAt(int x, int y, int z, FieldState newState)
    
    +boolean applyGravityTick() /' Makes all blocks in air fall by one '/
    +void applyVisually(Location gameStartBlock) /' Updates in-world blocks to match the state '/
    
    // Returns NEUTRAL if there is no winner yet
    +FieldState getWinnerIfAny(int winRequiredAmount) /' Returns NEUTRAL for no winner yet '/
    -int getFieldsInARowCount(FieldPoint startPoint, Vector3i direction) /' Counts how many fields, starting from *startPoint* and going into *direction*, have the same state. Immediate return if the state at *startPoint* == *FieldState.NEUTRAL* '/
    +boolean winIsPossible() /' Whether (false) or not (true) to cancel the game '/
    +ArrayList<Location> getWinRowBlockLocations(int winRequiredAmount, Location gameStartBlock) /' Returns the Locations of the Blocks used to win the game '/
}

+class GameListener {
    .. Fields ..
    Game game
    +boolean allowMarkingFields
    
    .. Methods ..
    +GameListener(Game game)
    +void activate()
    +void deactivate()
    -boolean isAuthorizedPlayer(Player player)
    +@EventHandler void onBlockPlace(...) /' BlockPlaceEvent '/
    +@EventHandler void onBlockBreak(...) /' BlockBreakEvent '/
    +@EventHandler void onEntitySummon(...) /' EntitySpawnEvent '/
    +@EventHandler void onEntityExplode(...) /' EntityExplodeEvent '/
    +@EventHandler void onBlockExplode(...) /' BlockExplodeEvent '/
    +@EventHandler void onLightningStrike(..) /' LightningStrikeEvent '/
    +@EventHandler void onMove(...) /' PlayerMoveEvent '/
    +@EventHandler void onPlayerDamaged(...) /' EntityDamageByEntityEvent '/
    +@EventHandler void onBlockMove(...) /' BlockFromToEvent '/
    +@EventHandler void onPlayerInteract(...) /' PlayerInteractEvent '/
}


+class CubicBlockArea {
    .. Fields ..
    +Location startBlock
    +Location endBlock

    .. Methods ..
    +CubicBlockArea(Location startBlock, Location endBlock)
    +boolean contains(Location block)
    -int getPositiveDifference(int a, int b)
    +Vector3i size()
    +void forEach(Consumer<Block> action) /' Executes *action* for every block in the area!! '/
}

Game --- GameConfig
Game --- GameListener
Game ..> CubicBlockArea
Game ..> GameEndCause

GameState ..> FieldPoint
GameState ..> FieldState
Game --- GameState

@enduml
